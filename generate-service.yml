.generate-configs:
  stage: generate
  image: ${CI_REGISTRY_IMAGE}/pipeline-tools:latest # Verwendet das Image, das wir bauen
  script:
    # 1. Generiere alle Deployment-Typen
    - |
      # Finde alle Unterverzeichnisse in 'templates' und nutze sie als Deployment-Typen
      for dir in templates/*/; do
        type=$(basename "$dir")
        echo "Generating manifests for ${type}..."
        python /app/scripts/generate_manifest_v2.py --ssot-file service.yml --deployment-type "${type}"
      done

    # 2. Committe die generierten Dateien, falls es Änderungen gab
    - |
      echo "Prüfe auf Änderungen in den generierten Dateien..."
      git status
      if ! git diff --quiet --exit-code deployments/; then
        echo "Änderungen in 'deployments/' erkannt. Committe die neuen Konfigurationen."
        git config --global user.name "${GITLAB_USER_NAME}"
        git config --global user.email "${GITLAB_USER_EMAIL}"
        git add deployments/
        git commit -m "ci: Konfigurationen automatisch generiert [skip ci]"
        git push -o ci.skip "https://oauth2:${GIT_PUSH_TOKEN}@${CI_REPOSITORY_URL#*@}" HEAD:$CI_COMMIT_BRANCH
      else
        echo "Keine Änderungen in den generierten Konfigurationen."
      fi