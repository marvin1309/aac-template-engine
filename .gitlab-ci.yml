# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places.
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - test

.test-template:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install PyYAML Jinja2
  # The script creates the 'deployments' directory inside the test folder, which we clean up.
  after_script:
    - rm -rf tests/service-test/deployments
  tags:
    - docker

test-docker-compose-generation:
  extends: .test-template
  script:
    - |
      echo "🧪 Testing docker-compose generation with BookStack service..."
      
      # Navigate into the test service directory
      cd tests/service-test
      
      echo "📄 Reading service.yml and converting to JSON..."
      BOOKSTACK_SERVICE_JSON="$(python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))' < service.yml)"
      
      # 🐞 CRITICAL DEBUG STEP: Print the JSON to see what the script will receive
      echo "--- START OF JSON DATA ---"
      echo "$BOOKSTACK_SERVICE_JSON"
      echo "--- END OF JSON DATA ---"

      echo "⚙️ Running manifest generator script..."
      python ../../scripts/generate_manifest.py --ssot-json "$BOOKSTACK_SERVICE_JSON" --template-path ../.. --deployment-type docker_compose
      
      echo "🔎 Verifying generated files..."
      test -f deployments/docker_compose/docker-compose.yml || (echo "docker-compose.yml not found!" && exit 1)
      test -f deployments/docker_compose/.env || (echo ".env file not found!" && exit 1)
      test -f deployments/docker_compose/stack.env || (echo "stack.env file not found!" && exit 1)
      
      grep -q 'image: lscr.io/linuxserver/bookstack' deployments/docker_compose/docker-compose.yml
      grep -q 'DB_DATABASE: "bookstack"' deployments/docker_compose/.env
      grep -q 'DB_PASSWORD=' deployments/docker_compose/stack.env
      
      echo "✅ BookStack Docker Compose generation test passed."
  tags:
    - docker

validate-schema:
  stage: test
  image: python:3.9-slim
  before_script:
    - pip install yamale PyYAML
  script:
    - echo "📄 Validating BookStack service.yml against the schema..."
    # Point the validator to the new BookStack service file
    - python -c "import yamale; yamale_schema = yamale.make_schema('tests/service-schema.yml'); yamale_data = yamale.make_data('tests/service-test/service.yml'); yamale.validate(yamale_schema, yamale_data)"
    - echo "✅ Schema validation successful!"
  tags:
    - docker