# This is a reusable GitLab CI/CD pipeline for service repositories.
# It automates the generation, validation, and commit of deployment configurations.

default:
  tags:
    - docker

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - generate
  - validate
  - commit
  - promote
  - release
  - info # Neue Stage fÃ¼r die Info-Jobs

# ==========================================================================
# Â  WORKFLOW FÃœR DEN 'dev'-BRANCH (Generate, Validate, Commit, Promote)
# Â  Die folgenden Jobs laufen jetzt AUSSCHLIESSLICH auf dem 'dev'-Branch.
# ==========================================================================

.generate-job:
  stage: generate
  image: python:3.9-slim
  # ... (before_script und script bleiben unverÃ¤ndert) ...
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
    - pip install PyYAML Jinja2
    - git clone "https://gitlab-ci-token:${CI_GITLAB_TOKEN_GLOBAL_FESER}@${CI_SERVER_HOST}/aac-application-definitions/aac-template-engine.git"
    - cp -r aac-template-engine/templates .
  script:
    - echo "Generating '$DEPLOYMENT_TYPE' deployment..."
    - python aac-template-engine/scripts/generate_manifest.py --ssot-file service.yml --deployment-type $DEPLOYMENT_TYPE
  artifacts:
    paths:
      - deployments/
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"' # NEU: Nur auf dev ausfÃ¼hren

generate-docker-compose:
  extends: .generate-job
  variables:
    DEPLOYMENT_TYPE: docker_compose

generate-custom-files:
  extends: .generate-job
  script:
    - echo "Processing custom files from custom_templates/files/..."
    - python aac-template-engine/scripts/generate_manifest.py --ssot-file service.yml --process-files
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
      exists:
        - custom_templates/files/**/*

validate-docker-compose:
  stage: validate
  image: docker:latest
  services:
    - docker:dind
  needs:
    - generate-docker-compose
  # ... (script bleibt unverÃ¤ndert) ...
  script:
    - |
      if [ -f "deployments/docker_compose/docker-compose.yml" ]; then
        echo "Validating generated docker-compose.yml syntax..."
        apk add --no-cache docker-compose
        docker-compose -f deployments/docker_compose/docker-compose.yml config
      else
        echo "No docker-compose.yml found to validate."
        exit 1
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"' # NEU: Nur auf dev ausfÃ¼hren

commit-generated-files:
  stage: commit
  image: alpine:latest
  needs:
    - generate-docker-compose
    - validate-docker-compose
    - job: generate-custom-files
      optional: true
  # ... (before_script und script bleiben unverÃ¤ndert) ...
  before_script:
    - apk add --no-cache git
    - git config --global user.email "ci-bot@${CI_SERVER_HOST}"
    - git config --global user.name "GitLab CI Bot"
    - git remote set-url origin "https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
  script:
    - git add deployments/
    - |
      if ! git diff --staged --quiet; then
        echo "Changes detected in deployment files. Committing..."
        git commit -m "ci: Auto-generate deployment manifests [skip ci]"
        git push origin HEAD:$CI_COMMIT_BRANCH
        echo "Committed and pushed generated deployment files."
      else
        echo "No changes in deployment files to commit."
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"' # NEU: Nur auf dev ausfÃ¼hren

promote-to-test:
  stage: promote
  image: alpine:latest
  needs:
    - commit-generated-files
  # ... (script bleibt unverÃ¤ndert) ...
  script:
    - echo "Promoting dev branch to test branch..."
    - apk add --no-cache git
    - git config --global user.email "ci-bot@${CI_SERVER_HOST}"
    - git config --global user.name "GitLab CI Bot"
    - git remote set-url origin "https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - git fetch origin
    - git reset --hard origin/dev
    - git push -f origin HEAD:test
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"' # Diese Regel war schon korrekt

promote-to-production:
  stage: promote
  image: alpine:latest
  needs:
    - promote-to-test
  # ... (script bleibt unverÃ¤ndert) ...
  script:
    - echo "Promoting test branch to production (main) branch..."
    - apk add --no-cache git
    - git config --global user.email "ci-bot@${CI_SERVER_HOST}"
    - git config --global user.name "GitLab CI Bot"
    - git remote set-url origin "https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - git fetch origin
    - git reset --hard origin/test
    - git push -f origin HEAD:main
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"' # Diese Regel war schon korrekt

#create-release-tag-and-deploy:
#  stage: release
#  image: alpine:latest
#  needs:
#    - promote-to-production
#  before_script:
#    - apk add --no-cache git
#    - git config --global user.email "ci-bot@${CI_SERVER_HOST}"
#    - git config --global user.name "GitLab CI Bot"
#    - git remote set-url origin "https://gitlab-ci-token:${GIT_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
#  script:
#    - export TAG_VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
#    - echo "Creating and pushing tag: $TAG_VERSION"
#    - git tag $TAG_VERSION
#    - git push origin $TAG_VERSION
#    - echo "Deployment for $CI_PROJECT_NAME with version $TAG_VERSION would now be triggered."
#  rules:
#    - if: '$CI_COMMIT_BRANCH == "dev"'
#trigger-production-deployment:
#  stage: release
#  trigger:
#    project: 'iac-environment/iac-ansible-automation'
#    branch: main
#    strategy: depend
#  variables:
#    SERVICE_NAME: $CI_PROJECT_NAME
#    SERVICE_VERSION: $CI_COMMIT_TAG
#    SERVICE_REPO_URL: $CI_PROJECT_URL
#  rules:
#    - if: $CI_COMMIT_TAG # Diese Regel bleibt, da sie auf Tags reagiert

# ==========================================================================
# Â  NEUE INFO-JOBS fÃ¼r 'main' und 'test' Branches
# ==========================================================================

list-main-deployments:
  stage: info
  image: alpine:latest
  script:
    - echo "ðŸ“„ Listing deployments on main branch..."
    - |
      if [ -d "deployments" ]; then
        ls -R deployments
      else
        echo "No deployments directory found."
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

list-test-deployments:
  stage: info
  image: alpine:latest
  script:
    - echo "ðŸ§ª Listing deployments on test branch..."
    - |
      if [ -d "deployments" ]; then
        ls -R deployments
      else
        echo "No deployments directory found."
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'