# This is a reusable GitLab CI/CD pipeline for service repositories.
# It automates a full GitOps lifecycle for each environment:
# Generate -> Validate -> Commit -> Deploy.

default:
  tags:
    - docker

stages:
  - dev-generate
  - dev-validate
  - dev-commit
  - dev-deploy
  - test-generate
  - test-validate
  - test-commit
  - test-deploy
  - prod-generate
  - prod-validate
  - prod-commit
  - prod-deploy
  - documentation


# ==========================================================================
# REUSABLE TEMPLATES (.generate-base, .validate-base, .commit-artifacts)
# ==========================================================================

.generate-base:
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
    - pip install PyYAML Jinja2
    - git clone "https://gitlab-ci-token:${CI_GITLAB_TOKEN_GLOBAL_FESER}@${CI_SERVER_HOST}/aac-application-definitions/aac-template-engine.git"
  artifacts:
    paths: [deployments/]
    expire_in: 1 hour
  rules:
    # This rule is a placeholder and should be overridden in the concrete jobs
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'


.validate-base:
  image: docker:latest
  services: [docker:dind]
  script:
    - apk add --no-cache docker-compose
    - docker-compose -f deployments/docker_compose/docker-compose.yml config
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

.commit-artifacts:
  image: python:3.9-slim
  before_script:
    - echo "Adding DNS fix for internal GitLab instance..."
    - echo "$INTERNAL_GITLAB_IP gitlab.int.fam-feser.de" >> /etc/hosts
    - apt-get update && apt-get install -y --no-install-recommends git
    - git config --global user.email "ci-bot@${CI_SERVER_HOST}"
    - git config --global user.name "GitLab CI Re-committer"
    - git remote set-url origin "https://gitlab-ci-token:${CI_GITLAB_TOKEN_GLOBAL_FESER}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
    - git stash --include-untracked # Stash modified and untracked files (artifacts)
    - git checkout $CI_COMMIT_BRANCH
    - git stash pop || true # Re-apply the stashed files. '|| true' prevents failure if there was nothing to stash.
  script:
    - |
      # The stashed artifacts are now restored. We can add all changes.
      git add .
      if ! git diff --staged --quiet; then
        echo "Changes detected in generated artifacts. Committing..."
        git commit -m "ci: Re-commit ${CI_COMMIT_BRANCH} artifacts [skip ci]"

        echo "Rebasing local commit on top of remote changes..."
        git pull --rebase origin $CI_COMMIT_BRANCH

        echo "Pushing changes to remote..."
        git push origin $CI_COMMIT_BRANCH
      else
        echo "No changes in generated artifacts to re-commit."
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

# ==========================================================================
# DEV WORKFLOW (runs on 'dev' branch)
# ==========================================================================
dev-generate-docker-compose:
  extends: .generate-base
  stage: dev-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --deployment-type "docker_compose" --stage "dev"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

dev-generate-custom-files:
  extends: .generate-base
  stage: dev-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-files --stage "dev"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'
      exists: [custom_templates/files/**/*]

dev-validate-docker-compose:
  extends: .validate-base
  stage: dev-validate
  needs: [dev-generate-docker-compose]
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

dev-commit:
  extends: .commit-artifacts
  stage: dev-commit
  needs:
    - dev-validate-docker-compose
    - dev-generate-docker-compose
    - job: dev-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

dev-deploy:
  stage: dev-deploy
  needs: [dev-commit]
  trigger:
    project: 'iac-environment/iac-ansible-automation'
    branch: main
    strategy: depend
  variables:
    SERVICE_NAME: $CI_PROJECT_NAME
    SERVICE_BRANCH: 'dev'
    DEPLOYMENT_TYPE: 'single_service_trigger'
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

dev-generate-documentation:
  extends: .generate-base
  stage: dev-generate # Moved to generate stage
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-documentation --stage "dev"
  artifacts:
    paths:
      - deployments/ # This now includes deployments/documentation
  needs:
    - dev-generate-docker-compose
    - job: dev-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'


# ==========================================================================
# TEST WORKFLOW (runs on 'test' branch)
# ==========================================================================
test-generate-docker-compose:
  extends: .generate-base
  stage: test-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --deployment-type "docker_compose" --stage "test"
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

test-generate-custom-files:
  extends: .generate-base
  stage: test-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-files --stage "test"
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'
      exists: [custom_templates/files/**/*]

test-validate-docker-compose:
  extends: .validate-base
  stage: test-validate
  needs: [test-generate-docker-compose]
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

test-commit:
  extends: .commit-artifacts
  stage: test-commit
  needs:
    - test-validate-docker-compose
    - test-generate-docker-compose
    - job: test-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

test-deploy:
  stage: test-deploy
  needs: [test-commit]
  trigger:
    project: 'iac-environment/iac-ansible-automation'
    branch: main
    strategy: depend
  variables:
    SERVICE_NAME: $CI_PROJECT_NAME
    SERVICE_BRANCH: 'test'
    DEPLOYMENT_TYPE: 'single_service_trigger'
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

test-generate-documentation:
  extends: .generate-base
  stage: test-generate # Moved to generate stage
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-documentation --stage "test"
  artifacts:
    paths:
      - deployments/ # This now includes deployments/documentation
  needs:
    - test-generate-docker-compose
    - job: test-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "test" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

# ==========================================================================
# PROD WORKFLOW (runs on 'main' branch)
# ==========================================================================
prod-generate-docker-compose:
  extends: .generate-base
  stage: prod-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --deployment-type "docker_compose" --stage "prod"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

prod-generate-custom-files:
  extends: .generate-base
  stage: prod-generate
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-files --stage "prod"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'
      exists: [custom_templates/files/**/*]

prod-validate-docker-compose:
  extends: .validate-base
  stage: prod-validate
  needs: [prod-generate-docker-compose]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

prod-commit:
  extends: .commit-artifacts
  stage: prod-commit
  needs:
    - prod-validate-docker-compose
    - prod-generate-docker-compose
    - prod-generate-documentation
    - job: prod-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

prod-deploy:
  stage: prod-deploy
  needs: [prod-commit]
  trigger:
    project: 'iac-environment/iac-ansible-automation'
    branch: main
    strategy: depend
  variables:
    SERVICE_NAME: $CI_PROJECT_NAME
    SERVICE_BRANCH: 'main'
    DEPLOYMENT_TYPE: 'single_service_trigger'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'
      when: manual
      allow_failure: false

prod-generate-documentation:
  extends: .generate-base
  stage: prod-generate # Moved to generate stage
  script:
    - SSOT_JSON=$(python3 -c 'import yaml, json; print(json.dumps(yaml.safe_load(open("service.yml"))))')
    - python3 aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-documentation --stage "prod"
  artifacts:
    paths:
      - deployments/ # This now includes deployments/documentation
  needs:
    - prod-generate-docker-compose
    - job: prod-generate-custom-files
      optional: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'

# ==========================================================================
# DOCUMENTATION WORKFLOW
# ==========================================================================
publish_to_docs:
  stage: documentation
  image: alpine:latest
  needs: [prod-deploy]
  variables:
    DOCS_REPO_URL: "https://gitlab.int.fam-feser.de/documentation/aac-iac-documentation.git"
  script:
    # Der Skript-Inhalt bleibt unverändert, da er bereits gut funktioniert hat.
    - |
      DOC_SOURCE_FILE="deployments/documentation/documentation.md"
      if [ ! -f "$DOC_SOURCE_FILE" ]; then
        echo "Keine '$DOC_SOURCE_FILE' in den Artefakten gefunden. Überspringe Dokumentations-Update."
        exit 0
      fi
      
      echo "Klone das Dokumentations-Repository..."
      apk add --no-cache git
      git config --global user.email "ci-bot@${CI_SERVER_HOST}"
      git config --global user.name "GitLab CI Documentation Bot"
      git clone "https://gitlab-ci-token:${DOCS_REPO_TOKEN}@$(echo "$DOCS_REPO_URL" | sed 's|https://||')" docs_repo
      cd docs_repo

      DOC_DIR="site/content/aac-services/${CI_PROJECT_NAME}"
      DOC_FILE="${DOC_DIR}/${CI_PROJECT_NAME}-documentation.md"
      mkdir -p "${DOC_DIR}"

      echo "Erstelle die Dokumentationsdatei mit Hugo-Header..."
      {
        echo "---";
        echo "title: \"Dokumentation: ${CI_PROJECT_NAME}\"";
        echo "date: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
        echo "lastmod: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
        echo "draft: false";
        echo "description: \"Automatisch generierte Service-Dokumentation für ${CI_PROJECT_NAME}.\"";
        echo "---";
        echo "";
        cat ../${DOC_SOURCE_FILE};
      } > "${DOC_FILE}"

      git add "${DOC_FILE}"
      if ! git diff --staged --quiet; then
        git commit -m "docs: Aktualisiere Service-Dokumentation für ${CI_PROJECT_NAME}"
        git push origin main
      else
        echo "Keine Änderungen an der Dokumentation."
      fi
  rules:
    # Dieser Job läuft nur nach einem erfolgreichen manuellen Prod-Deploy.
    - if: '$CI_COMMIT_BRANCH == "main" && $CI_COMMIT_MESSAGE !~ /\[skip ci\]/'
      when: on_success