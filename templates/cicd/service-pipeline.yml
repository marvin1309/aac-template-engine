# This is a reusable GitLab CI/CD pipeline for service repositories.
# It automates a full GitOps lifecycle: Generate -> Validate -> Commit -> Deploy -> Promote.

default:
  tags:
    - docker

stages:
  - generate
  - validate
  - dev-commit
  - dev-deploy
  - test-promote
  - test-deploy
  - prod-promote
  - prod-deploy

# ==========================================================================
# STAGE 1: GENERATE (runs on dev branch)
# ==========================================================================
.generate-base:
  stage: generate
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
    - pip install PyYAML Jinja2
    - git clone "https://gitlab-ci-token:${CI_GITLAB_TOKEN_GLOBAL_FESER}@${CI_SERVER_HOST}/aac-application-definitions/aac-template-engine.git"
  artifacts:
    paths: [deployments/]
    expire_in: 1 hour
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE!~ /ci:/'

generate-docker-compose:
  extends: .generate-base
  script:
    - SSOT_JSON=$(python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))' < service.yml)
    - python aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --deployment-type "docker_compose"

generate-custom-files:
  extends: .generate-base
  script:
    - SSOT_JSON=$(python -c 'import sys, yaml, json; print(json.dumps(yaml.safe_load(sys.stdin)))' < service.yml)
    - python aac-template-engine/scripts/generate_manifest.py --ssot-json "$SSOT_JSON" --template-path aac-template-engine --process-files
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE!~ /ci:/'
      exists: [custom_templates/files/**/*]

# ==========================================================================
# STAGE 2: VALIDATE (runs on dev branch)
# ==========================================================================
validate-docker-compose:
  stage: validate
  image: docker:latest
  services: [docker:dind]
  needs: [generate-docker-compose]
  script:
    - apk add --no-cache docker-compose
    - docker-compose -f deployments/docker_compose/docker-compose.yml config
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE!~ /ci:/'

# ==========================================================================
# STAGE 3: DEV COMMIT (runs on dev branch)
# ==========================================================================
.promote-base:
  stage: dev-commit
  image: python:3.9-slim
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends git
    - pip install PyYAML
    - git clone "https://gitlab-ci-token:${CI_GITLAB_TOKEN_GLOBAL_FESER}@${CI_SERVER_HOST}/aac-application-definitions/aac-template-engine.git"
  variables:
    IAC_CONTROLLER_REPO_URL: "https://gitlab.int.fam-feser.de/iac-environment/iac-controller.git" # The URL to the central inventory repository.

dev-promote-and-deploy:
  extends: .promote-base
  needs:
    - job: validate-docker-compose
    - job: generate-custom-files
      optional: true
  script:
    - echo "Promoting service to dev environment..."
    - >
      python aac-template-engine/scripts/promote_service.py
      --service-name "$CI_PROJECT_NAME"
      --service-git-repo "$CI_PROJECT_URL.git"
      --target-stage "dev"
      --iac-controller-repo-url "$IAC_CONTROLLER_REPO_URL"
      --iac-controller-token "$CI_GITLAB_TOKEN_GLOBAL_FESER"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE!~ /ci:/'

# ==========================================================================
# STAGE 5: TEST PROMOTE (runs on dev branch)
# ==========================================================================
# This job is now manual. A user can click it to create the 'test' branch
# and promote the service to the 'test' stage in the central inventory.
test-promote:
  stage: test-promote
  extends: .promote-base
  needs: [dev-promote-and-deploy]
  script:
    - echo "Creating test branch..."
    - git fetch origin dev
    - git checkout -B test origin/dev
    - git push -f origin test
    - echo "Promoting service to test environment..."
    - >
      python aac-template-engine/scripts/promote_service.py
      --service-name "$CI_PROJECT_NAME"
      --service-git-repo "$CI_PROJECT_URL.git"
      --target-stage "test"
      --iac-controller-repo-url "$IAC_CONTROLLER_REPO_URL"
      --iac-controller-token "$CI_GITLAB_TOKEN_GLOBAL_FESER"
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev" && $CI_COMMIT_MESSAGE!~ /ci:/'
      when: manual
      allow_failure: false

# ==========================================================================
# STAGE 6: TEST DEPLOY (runs on test branch)
# ==========================================================================
test-deploy:
  stage: test-deploy
  trigger:
    project: 'iac-environment/iac-ansible-automation'
    branch: main
    strategy: depend
  variables:
    SERVICE_NAME: $CI_PROJECT_NAME
    SERVICE_BRANCH: 'test'
    DEPLOYMENT_TYPE: 'single_service_trigger'
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'

# ==========================================================================
# STAGE 7: PROD PROMOTE (runs on test branch)
# ==========================================================================
prod-promote:
  stage: prod-promote
  extends: .promote-base
  needs: [test-deploy]
  script:
    - echo "Creating main branch from test..."
    - git fetch origin test
    - git checkout -B main origin/test
    - git push -f origin main
    - echo "Promoting service to prod environment..."
    - >
      python aac-template-engine/scripts/promote_service.py
      --service-name "$CI_PROJECT_NAME"
      --service-git-repo "$CI_PROJECT_URL.git"
      --target-stage "prod"
      --iac-controller-repo-url "$IAC_CONTROLLER_REPO_URL"
      --iac-controller-token "$CI_GITLAB_TOKEN_GLOBAL_FESER"
  rules:
    - if: '$CI_COMMIT_BRANCH == "test"'

# ==========================================================================
# STAGE 8: PROD DEPLOY (runs on main branch)
# ==========================================================================
prod-deploy:
  stage: prod-deploy
  trigger:
    project: 'iac-environment/iac-ansible-automation'
    branch: main
    strategy: depend
  variables:
    SERVICE_NAME: $CI_PROJECT_NAME
    SERVICE_BRANCH: 'main'
    DEPLOYMENT_TYPE: 'single_service_trigger'
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false

publish_to_docs:
  stage: prod-deploy
  image: alpine:latest
  needs: [prod-deploy]
  variables:
    DOCS_REPO_URL: "https://gitlab.int.fam-feser.de/documentation/aac-iac-documentation.git"
  script:
    - |
      if [ ! -f "documentation.md" ]; then
        echo "Keine 'documentation.md' in diesem Repository gefunden. Überspringe Dokumentations-Update."
        exit 0
      fi
      
      echo "Klone das Dokumentations-Repository..."
      git clone "https://gitlab-ci-token:${DOCS_REPO_TOKEN}@$(echo "$DOCS_REPO_URL" | sed 's|https://||')" docs_repo
      cd docs_repo

      DOC_DIR="site/content/aac-services/${CI_PROJECT_NAME}"
      DOC_FILE="${DOC_DIR}/${CI_PROJECT_NAME}-documentation.md"
      mkdir -p "${DOC_DIR}"

      echo "Erstelle die Dokumentationsdatei mit Hugo-Header..."
      {
        echo "---";
        echo "title: \"Dokumentation: ${CI_PROJECT_NAME}\"";
        echo "date: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
        echo "lastmod: $(date -u +'%Y-%m-%dT%H:%M:%SZ')";
        echo "draft: false";
        echo "tags:";
        echo "description: \"Automatisch generierte Service-Dokumentation für ${CI_PROJECT_NAME}.\"";
        echo "---";
        echo "";
        cat../documentation.md;
      } > "${DOC_FILE}"

      git add "${DOC_FILE}"
      if ! git diff --staged --quiet; then
        git commit -m "docs: Aktualisiere Service-Dokumentation für ${CI_PROJECT_NAME}"
        git push origin main
      else
        echo "Keine Änderungen an der Dokumentation."
      fi
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false