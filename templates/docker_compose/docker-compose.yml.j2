version: "3.8"

services:
  # --- Main Application Service ---
  {{ service.name | lower }}:
    image: "{{ service.image_repo }}:{{ service.image_tag }}"
    container_name: "{{ service.name | lower }}"
    hostname: "{{ service.hostname | default(service.name) }}"
    restart: "{{ deployments.docker_compose.restart_policy | default('always') }}"

    {% if deployments.docker_compose.command is defined %}
    command:
      {% for cmd_item in deployments.docker_compose.command %}
      - "{{ cmd_item }}"
      {% endfor %}
    {% endif %}

    env_file: 
      - .env
      - stack.env

    {% if deployments.docker_compose.depends_on is defined %}
    depends_on:
      {% for dep in deployments.docker_compose.depends_on %}
      {{ dep.service }}:
        condition: {{ dep.condition }}
      {% endfor %}
    {% endif %}

    {% if ports is defined and ports %}
    ports:
      {% for p in ports %}
      - "{{ p.external_port | default(p.port) }}:{{ p.port }}{% if p.protocol %}/{{ p.protocol }}{% endif %}"
      {% endfor %}
    {% endif %}

    {% if (volumes is defined and volumes) or (deployments.docker_compose.raw_volumes is defined and deployments.docker_compose.raw_volumes) %}
    volumes:
      {# First, process the standard, named volumes #}
      {% for v in volumes %}
      - "{{ deployments.docker_compose.host_base_path }}/{{ service.name | lower }}/{{ v.name }}:{{ v.path }}"
      {% endfor %}
      
      {# Second, process the raw volume mounts like the docker socket #}
      {% for v in deployments.docker_compose.raw_volumes %}
      - "{{ v }}"
      {% endfor %}
    {% endif %}
    networks:
      {% for net_name in deployments.docker_compose.networks_to_join %}
      - {{ net_name }}
      {% endfor %}

    {% if deployments.docker_compose.healthcheck is defined %}
    healthcheck:
      test: {{ deployments.docker_compose.healthcheck.test | tojson }}
      interval: {{ deployments.docker_compose.healthcheck.interval | default('30s') }}
      timeout: {{ deployments.docker_compose.healthcheck.timeout | default('5s') }}
      retries: {{ deployments.docker_compose.healthcheck.retries | default(3) }}
    {% endif %}

    {% if deployments.docker_compose.security_opts is defined %}
    security_opt:
      {% for opt in deployments.docker_compose.security_opts %}
      - {{ opt }}
      {% endfor %}
    {% endif %}

    {% if deployments.docker_compose.logging %}
    logging:
      driver: {{ deployments.docker_compose.logging.driver }}
      options:
      {% for key, value in deployments.docker_compose.logging.options.items() %}
        "{{ key }}": "{{ value }}"
      {% endfor %}
    {% endif %}

    {% if config.routing_enabled or (config.integrations and (config.integrations.autodns.enabled or config.integrations.homepage.enabled)) %}
    labels:
      {# --- Define FQDN based on DNS mode --- #}
      {% if config.integrations.autodns.use_custom_hostname %}
        {% set fqdn = service.hostname ~ '.' ~ config.domain_name %}
      {% else %}
        {% set fqdn = service.stage ~ '.' ~ service.name ~ '.' ~ (inventory_hostname | default('ci-validation-host')) ~ '.' ~ config.domain_name %}
      {% endif %}

      # === Traefik Labels ===
      {% if config.routing_enabled %}
      traefik.enable: "true"
      traefik.docker.network: "{{ deployments.docker_compose.network_definitions.secured.name }}"
      traefik.http.routers.{{ service.name }}.rule: "Host(`{{ fqdn }}`)"
      traefik.http.routers.{{ service.name }}.entrypoints: "{{ config.entrypoint }}"
      traefik.http.routers.{{ service.name }}.tls: "true"
      traefik.http.routers.{{ service.name }}.tls.certresolver: "{{ config.cert_resolver }}"
      
      {# --- Traefik Service Definition --- #}
      {# If the service uses host networking, we must provide the full URL with the host's IP. #}
      {# The 'ansible_host_ip' variable is injected by the Ansible deployment role. #}
      {# If it's not defined during CI generation, it falls back to a placeholder IP. #}
      {% if config.routing_host_network %}
      traefik.http.services.{{ service.name }}.loadbalancer.server.url: "http://{{ ansible_host_ip | default('10.111.111.111') }}:{{ ports[0].port }}"
      {% else %}
      {# Otherwise, for bridge networking, we just specify the port. #}
      traefik.http.services.{{ service.name }}.loadbalancer.server.port: "{{ ports[0].port }}"
      {% endif %}
      {% endif %}

      # === AutoDNS Labels (Dynamically selects mode) ===
      {% if config.integrations is defined and config.integrations.autodns is defined and config.integrations.autodns.enabled %}
      auto-dns.createWildcard.{{ service.name }}: "{{ config.integrations.autodns.create_wildcard | lower }}"
      {% if config.integrations.autodns.use_custom_hostname %}
      {# --- Custom Hostname Mode (for Prod) --- #}
      auto-dns.customDNS.{{ service.name }}: "true"
      auto-dns.customDOMAIN.{{ service.name }}: "{{ config.domain_name }}"
      auto-dns.customHost.{{ service.name }}: "{{ service.hostname }}"
      {% else %}
      {# --- Automatic Structured Mode (for Dev/Test) --- #}
      auto-dns.customDNS.{{ service.name }}: "false"
      auto-dns.domain.{{ service.name }}: "{{ config.domain_name }}"
      auto-dns.stage.{{ service.name }}: "{{ service.stage }}"
      auto-dns.service.{{ service.name }}: "{{ service.name }}"
      auto-dns.hostname.{{ service.name }}: "{{ inventory_hostname | default('ci-validation-host') }}"
      {% endif %}
      {% endif %}

      # === Homepage Labels ===
      {% if config.integrations is defined and config.integrations.homepage is defined and config.integrations.homepage.enabled %}
      homepage.group: "{{ service.category }}"
      homepage.name: "{{ service.name }} - {{ inventory_hostname | default('ci-validation-host') }}"
      homepage.href: "https://{{ fqdn }}"
      homepage.icon: "{{ service.icon }}"
      homepage.description: "{{ service.description }}"
      {% if config.integrations.homepage.widget is defined %}
      homepage.widget.type: "{{ config.integrations.homepage.widget.type }}"
      homepage.widget.url: "https://{{ fqdn }}"
      {% if config.integrations.homepage.widget.key is defined %}
      homepage.widget.key: "{{ config.integrations.homepage.widget.key }}"
      {% endif %}
      {% endif %}
      {% endif %}
    {% endif %}

{% if dependencies is defined and dependencies %}
  # --- Service Dependencies ---
{% for dep_name, dep_config in dependencies.items() %}
  {{ dep_config.name }}:
    image: "{{ dep_config.image_repo }}:{{ dep_config.image_tag }}"
    container_name: "{{ dep_config.name }}"
    hostname: "{{ dep_config.name }}"
    restart: "{{ dep_config.restart_policy | default('always') }}"
    {% if dep_config.command is defined %}
    command:
      {% for item in dep_config.command %}
      - {{ item | tojson }}
      {% endfor %}
    {% endif %}
    {% if dep_config.user is defined %}
    user: "{{ dep_config.user }}"
    {% endif %}
    env_file:
      - .env
      - stack.env
    {% if dep_config.depends_on is defined %}
    depends_on:
      {% for dep in dep_config.depends_on %}
      {{ dep.service }}:
        condition: {{ dep.condition }}
      {% endfor %}
    {% endif %}
    {% if dep_config.volumes is defined %}
    volumes:
      {% for vol in dep_config.volumes %}
      - "{{ deployments.docker_compose.host_base_path }}/{{ service.name | lower }}/{{ vol.name }}:{{ vol.path }}"
      {% endfor %}
    {% endif %}
    {% if dep_config.networks_to_join is defined %}
    networks:
      {% for net_name in dep_config.networks_to_join %}
      - {{ net_name }}
      {% endfor %}
    {% endif %}
    {% if dep_config.healthcheck is defined %}
    healthcheck:
      test: {{ dep_config.healthcheck.test | tojson }}
      interval: {{ dep_config.healthcheck.interval | default('30s') }}
      timeout: {{ dep_config.healthcheck.timeout | default('5s') }}
      retries: {{ dep_config.healthcheck.retries | default(3) }}
    {% endif %}
    {% if dep_config.labels is defined %}
    labels:
      {% for key, value in dep_config.labels.items() %}
      "{{ key }}": "{{ value }}"
      {% endfor %}
    {% endif %}
{% endfor %}
{% endif %}

networks:
{% for net_name, net_def in deployments.docker_compose.network_definitions.items() %}
  {{ net_name }}:
    name: "{{ net_def.name }}"
    {% if net_def.external is defined and net_def.external %}
    external: true
    {% else %}
    driver: "{{ net_def.driver | default('bridge') }}"
    {% endif %}
{% endfor %}

{% if deployments.docker_compose.volume_definitions is defined and deployments.docker_compose.volume_definitions %}
volumes:
{% for vol_name, vol_def in deployments.docker_compose.volume_definitions.items() %}
  {{ vol_name }}:
    driver: {{ vol_def.driver }}
    driver_opts:
      {% for key, value in vol_def.driver_opts.items() %}
      {{ key }}: "{{ value }}"
      {% endfor %}
{% endfor %}
{% endif %}